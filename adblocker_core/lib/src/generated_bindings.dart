// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to AdBlockerCore Native library
class AdBlockerCoreNative {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AdBlockerCoreNative(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AdBlockerCoreNative.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<AdBlockerCore> adblocker_core_create() {
    return _adblocker_core_create();
  }

  late final _adblocker_core_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AdBlockerCore> Function()>>(
          'adblocker_core_create');
  late final _adblocker_core_create = _adblocker_core_createPtr
      .asFunction<ffi.Pointer<AdBlockerCore> Function()>();

  void adblocker_core_destroy(
    ffi.Pointer<AdBlockerCore> core,
  ) {
    return _adblocker_core_destroy(
      core,
    );
  }

  late final _adblocker_core_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AdBlockerCore>)>>(
      'adblocker_core_destroy');
  late final _adblocker_core_destroy = _adblocker_core_destroyPtr
      .asFunction<void Function(ffi.Pointer<AdBlockerCore>)>();

  bool adblocker_core_is_generic_element_hiding_enabled(
    ffi.Pointer<AdBlockerCore> core,
  ) {
    return _adblocker_core_is_generic_element_hiding_enabled(
      core,
    );
  }

  late final _adblocker_core_is_generic_element_hiding_enabledPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<AdBlockerCore>)>>(
      'adblocker_core_is_generic_element_hiding_enabled');
  late final _adblocker_core_is_generic_element_hiding_enabled =
      _adblocker_core_is_generic_element_hiding_enabledPtr
          .asFunction<bool Function(ffi.Pointer<AdBlockerCore>)>();

  void adblocker_core_set_generic_element_hiding_enabled(
    ffi.Pointer<AdBlockerCore> core,
    bool enabled,
  ) {
    return _adblocker_core_set_generic_element_hiding_enabled(
      core,
      enabled,
    );
  }

  late final _adblocker_core_set_generic_element_hiding_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<AdBlockerCore>,
              ffi.Bool)>>('adblocker_core_set_generic_element_hiding_enabled');
  late final _adblocker_core_set_generic_element_hiding_enabled =
      _adblocker_core_set_generic_element_hiding_enabledPtr
          .asFunction<void Function(ffi.Pointer<AdBlockerCore>, bool)>();

  void adblocker_core_load_basic_data(
    ffi.Pointer<AdBlockerCore> core,
    ffi.Pointer<ffi.Char> data,
    int length,
    bool preserve_rules,
  ) {
    return _adblocker_core_load_basic_data(
      core,
      data,
      length,
      preserve_rules,
    );
  }

  late final _adblocker_core_load_basic_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<AdBlockerCore>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Bool)>>('adblocker_core_load_basic_data');
  late final _adblocker_core_load_basic_data =
      _adblocker_core_load_basic_dataPtr.asFunction<
          void Function(
              ffi.Pointer<AdBlockerCore>, ffi.Pointer<ffi.Char>, int, bool)>();

  void adblocker_core_load_processed_data(
    ffi.Pointer<AdBlockerCore> core,
    ffi.Pointer<ffi.Char> data,
    int length,
  ) {
    return _adblocker_core_load_processed_data(
      core,
      data,
      length,
    );
  }

  late final _adblocker_core_load_processed_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<AdBlockerCore>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('adblocker_core_load_processed_data');
  late final _adblocker_core_load_processed_data =
      _adblocker_core_load_processed_dataPtr.asFunction<
          void Function(
              ffi.Pointer<AdBlockerCore>, ffi.Pointer<ffi.Char>, int)>();

  ProcessedData adblocker_core_get_processed_data(
    ffi.Pointer<AdBlockerCore> core,
  ) {
    return _adblocker_core_get_processed_data(
      core,
    );
  }

  late final _adblocker_core_get_processed_dataPtr = _lookup<
          ffi
          .NativeFunction<ProcessedData Function(ffi.Pointer<AdBlockerCore>)>>(
      'adblocker_core_get_processed_data');
  late final _adblocker_core_get_processed_data =
      _adblocker_core_get_processed_dataPtr
          .asFunction<ProcessedData Function(ffi.Pointer<AdBlockerCore>)>();

  void processed_data_free(
    ffi.Pointer<ProcessedData> data,
  ) {
    return _processed_data_free(
      data,
    );
  }

  late final _processed_data_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ProcessedData>)>>(
      'processed_data_free');
  late final _processed_data_free = _processed_data_freePtr
      .asFunction<void Function(ffi.Pointer<ProcessedData>)>();

  int adblocker_core_get_filters_count(
    ffi.Pointer<AdBlockerCore> core,
  ) {
    return _adblocker_core_get_filters_count(
      core,
    );
  }

  late final _adblocker_core_get_filters_countPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<AdBlockerCore>)>>(
      'adblocker_core_get_filters_count');
  late final _adblocker_core_get_filters_count =
      _adblocker_core_get_filters_countPtr
          .asFunction<int Function(ffi.Pointer<AdBlockerCore>)>();

  MatchResult adblocker_core_matches(
    ffi.Pointer<AdBlockerCore> core,
    ffi.Pointer<ffi.Char> url,
    ffi.Pointer<ffi.Char> first_party_domain,
    int filter_option,
  ) {
    return _adblocker_core_matches(
      core,
      url,
      first_party_domain,
      filter_option,
    );
  }

  late final _adblocker_core_matchesPtr = _lookup<
      ffi.NativeFunction<
          MatchResult Function(
              ffi.Pointer<AdBlockerCore>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('adblocker_core_matches');
  late final _adblocker_core_matches = _adblocker_core_matchesPtr.asFunction<
      MatchResult Function(ffi.Pointer<AdBlockerCore>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> adblocker_core_get_element_hiding_selectors(
    ffi.Pointer<AdBlockerCore> core,
    ffi.Pointer<ffi.Char> url,
  ) {
    return _adblocker_core_get_element_hiding_selectors(
      core,
      url,
    );
  }

  late final _adblocker_core_get_element_hiding_selectorsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<AdBlockerCore>, ffi.Pointer<ffi.Char>)>>(
      'adblocker_core_get_element_hiding_selectors');
  late final _adblocker_core_get_element_hiding_selectors =
      _adblocker_core_get_element_hiding_selectorsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<AdBlockerCore>, ffi.Pointer<ffi.Char>)>();

  StringArray adblocker_core_get_extended_css_selectors(
    ffi.Pointer<AdBlockerCore> core,
    ffi.Pointer<ffi.Char> url,
  ) {
    return _adblocker_core_get_extended_css_selectors(
      core,
      url,
    );
  }

  late final _adblocker_core_get_extended_css_selectorsPtr = _lookup<
          ffi.NativeFunction<
              StringArray Function(
                  ffi.Pointer<AdBlockerCore>, ffi.Pointer<ffi.Char>)>>(
      'adblocker_core_get_extended_css_selectors');
  late final _adblocker_core_get_extended_css_selectors =
      _adblocker_core_get_extended_css_selectorsPtr.asFunction<
          StringArray Function(
              ffi.Pointer<AdBlockerCore>, ffi.Pointer<ffi.Char>)>();

  StringArray adblocker_core_get_css_rules(
    ffi.Pointer<AdBlockerCore> core,
    ffi.Pointer<ffi.Char> url,
  ) {
    return _adblocker_core_get_css_rules(
      core,
      url,
    );
  }

  late final _adblocker_core_get_css_rulesPtr = _lookup<
      ffi.NativeFunction<
          StringArray Function(ffi.Pointer<AdBlockerCore>,
              ffi.Pointer<ffi.Char>)>>('adblocker_core_get_css_rules');
  late final _adblocker_core_get_css_rules =
      _adblocker_core_get_css_rulesPtr.asFunction<
          StringArray Function(
              ffi.Pointer<AdBlockerCore>, ffi.Pointer<ffi.Char>)>();

  StringArray adblocker_core_get_scriptlets(
    ffi.Pointer<AdBlockerCore> core,
    ffi.Pointer<ffi.Char> url,
  ) {
    return _adblocker_core_get_scriptlets(
      core,
      url,
    );
  }

  late final _adblocker_core_get_scriptletsPtr = _lookup<
      ffi.NativeFunction<
          StringArray Function(ffi.Pointer<AdBlockerCore>,
              ffi.Pointer<ffi.Char>)>>('adblocker_core_get_scriptlets');
  late final _adblocker_core_get_scriptlets =
      _adblocker_core_get_scriptletsPtr.asFunction<
          StringArray Function(
              ffi.Pointer<AdBlockerCore>, ffi.Pointer<ffi.Char>)>();

  void string_array_free(
    ffi.Pointer<StringArray> array,
  ) {
    return _string_array_free(
      array,
    );
  }

  late final _string_array_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<StringArray>)>>(
          'string_array_free');
  late final _string_array_free = _string_array_freePtr
      .asFunction<void Function(ffi.Pointer<StringArray>)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class MatchResult extends ffi.Struct {
  @ffi.Bool()
  external bool should_block;

  external ffi.Pointer<ffi.Char> matched_rule;

  external ffi.Pointer<ffi.Char> matched_exception_rule;
}

final class AdBlockerCore extends ffi.Opaque {}

final class ProcessedData extends ffi.Struct {
  external ffi.Pointer<ffi.Char> data;

  @ffi.Size()
  external int length;
}

final class StringArray extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Char>> data;

  @ffi.Size()
  external int length;
}

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;
